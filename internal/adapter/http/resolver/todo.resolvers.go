package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"html"

	"github.com/hareta0109/graphql_sandbox/internal/domain/model"
	"github.com/hareta0109/graphql_sandbox/internal/domain/model/graph"
	"github.com/hareta0109/graphql_sandbox/internal/lib/graph/generated"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input graph.TodoCreateInput) (*model.Todo, error) {
	escapedText := html.EscapeString(input.Text)
	todo, err := r.TodoUsecase.Create(escapedText, input.UserID)
	if err != nil {
		return nil, err
	}

	return todo, nil
}

// TodoesByUserID is the resolver for the todoesByUserId field.
func (r *queryResolver) TodoesByUserID(ctx context.Context, userID uint64) ([]*model.Todo, error) {
	todos, err := r.TodoUsecase.GetByUserID(userID)
	if err != nil {
		return nil, err
	}

	return todos, err
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	if obj.UserID == 0 {
		return nil, nil
	}

	user, err := r.UserUsecase.LoadUser(ctx, obj.UserID)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// Todo returns generated.TodoResolver implementation.
func (r *Resolver) Todo() generated.TodoResolver { return &todoResolver{r} }

type todoResolver struct{ *Resolver }
