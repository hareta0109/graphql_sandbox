package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"html"

	"github.com/hareta0109/graphql_sandbox/internal/domain/model"
	"github.com/hareta0109/graphql_sandbox/internal/domain/model/graph"
	"github.com/hareta0109/graphql_sandbox/internal/lib/graph/generated"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input graph.UserCreateInput) (*model.User, error) {
	escapedName := html.EscapeString(input.Name)
	user, err := r.UserUsecase.Create(escapedName, input.DepartmentID)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id uint64) (*model.User, error) {
	user, err := r.UserUsecase.Get(id)
	if err != nil {
		return nil, err
	}

	return user, err
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.UserUsecase.BulkGet()
	if err != nil {
		return nil, err
	}

	return users, err
}

// Department is the resolver for the department field.
func (r *userResolver) Department(ctx context.Context, obj *model.User) (*graph.Department, error) {
	if obj.DepartmentID == 0 {
		return nil, nil
	}

	department, err := r.DepartmentUsecase.LoadDepartment(ctx, obj.DepartmentID)
	if err != nil {
		return nil, err
	}

	return department, nil
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
